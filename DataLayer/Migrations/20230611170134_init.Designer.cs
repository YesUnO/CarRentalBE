// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230611170134_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Entities.Cars.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CarInsuranceId")
                        .HasColumnType("integer");

                    b.Property<int>("CarServiceState")
                        .HasColumnType("integer");

                    b.Property<int?>("CarSpecificationId")
                        .HasColumnType("integer");

                    b.Property<int>("CarState")
                        .HasColumnType("integer");

                    b.Property<decimal>("CurrentMileage")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("MileageAtPurchase")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProfilePicId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("STKId")
                        .HasColumnType("integer");

                    b.Property<string>("StripePriceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TechnicLicenseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarInsuranceId");

                    b.HasIndex("CarSpecificationId");

                    b.HasIndex("ProfilePicId");

                    b.HasIndex("STKId");

                    b.HasIndex("TechnicLicenseId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("DataLayer.Entities.Cars.CarDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BackSideImageId")
                        .HasColumnType("integer");

                    b.Property<int>("CarDocumentType")
                        .HasColumnType("integer");

                    b.Property<string>("DocNr")
                        .HasColumnType("text");

                    b.Property<int>("FrontSideImageId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ValidTill")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BackSideImageId");

                    b.HasIndex("FrontSideImageId");

                    b.ToTable("CarDocuments");
                });

            modelBuilder.Entity("DataLayer.Entities.Cars.CarInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("CarInsurances");
                });

            modelBuilder.Entity("DataLayer.Entities.Cars.CarSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Height")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LoadCapacity")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ManufacturedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ManufacturedIn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("integer");

                    b.Property<decimal>("TrunkHeight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TrunkLength")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TrunkVolume")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TrunkWidth")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("CarSpecifications");
                });

            modelBuilder.Entity("DataLayer.Entities.Files.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasDiscriminator<string>("ImageType").HasValue("Base");
                });

            modelBuilder.Entity("DataLayer.Entities.Files.PDF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccidentId")
                        .HasColumnType("integer");

                    b.Property<int?>("CarId")
                        .HasColumnType("integer");

                    b.Property<int?>("CarInsuranceId")
                        .HasColumnType("integer");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccidentId");

                    b.HasIndex("CarId");

                    b.HasIndex("CarInsuranceId");

                    b.ToTable("PDFs");
                });

            modelBuilder.Entity("DataLayer.Entities.Orders.Accident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("OrderId");

                    b.ToTable("Accidents");
                });

            modelBuilder.Entity("DataLayer.Entities.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccidentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Distance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasBeenPayed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccidentId");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DataLayer.Entities.Orders.StripeInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("AmountDue")
                        .HasColumnType("bigint");

                    b.Property<long>("AmountPaid")
                        .HasColumnType("bigint");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<string>("StripeInvoiceId")
                        .HasColumnType("text");

                    b.Property<int>("StripeInvoiceStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DataLayer.Entities.User.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<int?>("DriversLicenseId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("IdentificationCardId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DriversLicenseId");

                    b.HasIndex("IdentificationCardId");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("DataLayer.Entities.User.StripeSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("integer");

                    b.Property<string>("CheckoutSessionReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("text");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("text");

                    b.Property<int>("StripeSubscriptionStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("StripeSubscriptions");
                });

            modelBuilder.Entity("DataLayer.Entities.User.UserDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BackSideImageId")
                        .HasColumnType("integer");

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<string>("DocNr")
                        .HasColumnType("text");

                    b.Property<int?>("FrontSideImageId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("UserDocumentType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ValidTill")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BackSideImageId");

                    b.HasIndex("FrontSideImageId");

                    b.ToTable("UserDocuments");
                });

            modelBuilder.Entity("DataLayer.Entities.Files.AccidentImage", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Files.Image");

                    b.Property<int>("AccidentId")
                        .HasColumnType("integer");

                    b.HasIndex("AccidentId");

                    b.HasDiscriminator().HasValue("Accident");
                });

            modelBuilder.Entity("DataLayer.Entities.Files.CarDocumentImage", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Files.Image");

                    b.HasDiscriminator().HasValue("CarDocument");
                });

            modelBuilder.Entity("DataLayer.Entities.Files.OrderImage", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Files.Image");

                    b.Property<int>("CarImageType")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.HasIndex("OrderId");

                    b.HasDiscriminator().HasValue("Order");
                });

            modelBuilder.Entity("DataLayer.Entities.Files.UserDocumentImage", b =>
                {
                    b.HasBaseType("DataLayer.Entities.Files.Image");

                    b.HasDiscriminator().HasValue("UserDocument");
                });

            modelBuilder.Entity("DataLayer.Entities.Cars.Car", b =>
                {
                    b.HasOne("DataLayer.Entities.Cars.CarInsurance", "CarInsurance")
                        .WithMany()
                        .HasForeignKey("CarInsuranceId");

                    b.HasOne("DataLayer.Entities.Cars.CarSpecification", "CarSpecification")
                        .WithMany()
                        .HasForeignKey("CarSpecificationId");

                    b.HasOne("DataLayer.Entities.Files.Image", "ProfilePic")
                        .WithMany()
                        .HasForeignKey("ProfilePicId");

                    b.HasOne("DataLayer.Entities.Cars.CarDocument", "STK")
                        .WithMany("STKUsers")
                        .HasForeignKey("STKId");

                    b.HasOne("DataLayer.Entities.Cars.CarDocument", "TechnicLicense")
                        .WithMany("TechnicLicenseUsers")
                        .HasForeignKey("TechnicLicenseId");

                    b.Navigation("CarInsurance");

                    b.Navigation("CarSpecification");

                    b.Navigation("ProfilePic");

                    b.Navigation("STK");

                    b.Navigation("TechnicLicense");
                });

            modelBuilder.Entity("DataLayer.Entities.Cars.CarDocument", b =>
                {
                    b.HasOne("DataLayer.Entities.Files.CarDocumentImage", "BackSideImage")
                        .WithMany("BackCarDocuments")
                        .HasForeignKey("BackSideImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Files.CarDocumentImage", "FrontSideImage")
                        .WithMany("FrontCarDocuments")
                        .HasForeignKey("FrontSideImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BackSideImage");

                    b.Navigation("FrontSideImage");
                });

            modelBuilder.Entity("DataLayer.Entities.Files.PDF", b =>
                {
                    b.HasOne("DataLayer.Entities.Orders.Accident", "Accident")
                        .WithMany("Documantation")
                        .HasForeignKey("AccidentId");

                    b.HasOne("DataLayer.Entities.Cars.Car", "Car")
                        .WithMany("PurchaseContract")
                        .HasForeignKey("CarId");

                    b.HasOne("DataLayer.Entities.Cars.CarInsurance", "CarInsurance")
                        .WithMany("Documents")
                        .HasForeignKey("CarInsuranceId");

                    b.Navigation("Accident");

                    b.Navigation("Car");

                    b.Navigation("CarInsurance");
                });

            modelBuilder.Entity("DataLayer.Entities.Orders.Accident", b =>
                {
                    b.HasOne("DataLayer.Entities.Cars.Car", "Car")
                        .WithMany("Accidents")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Orders.Order", "Order")
                        .WithMany("Accidents")
                        .HasForeignKey("OrderId");

                    b.Navigation("Car");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DataLayer.Entities.Orders.Order", b =>
                {
                    b.HasOne("DataLayer.Entities.Orders.Accident", "Accident")
                        .WithMany()
                        .HasForeignKey("AccidentId");

                    b.HasOne("DataLayer.Entities.Cars.Car", "Car")
                        .WithMany("Orders")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.User.ApplicationUser", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accident");

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DataLayer.Entities.Orders.StripeInvoice", b =>
                {
                    b.HasOne("DataLayer.Entities.Orders.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DataLayer.Entities.User.ApplicationUser", b =>
                {
                    b.HasOne("DataLayer.Entities.User.UserDocument", "DriversLicense")
                        .WithMany("DriverLicenseUsers")
                        .HasForeignKey("DriversLicenseId");

                    b.HasOne("DataLayer.Entities.User.UserDocument", "IdentificationCard")
                        .WithMany("IdentificationLicenseUsers")
                        .HasForeignKey("IdentificationCardId");

                    b.Navigation("DriversLicense");

                    b.Navigation("IdentificationCard");
                });

            modelBuilder.Entity("DataLayer.Entities.User.StripeSubscription", b =>
                {
                    b.HasOne("DataLayer.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("StripeSubscriptions")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("DataLayer.Entities.User.UserDocument", b =>
                {
                    b.HasOne("DataLayer.Entities.Files.UserDocumentImage", "BackSideImage")
                        .WithMany("BackUserDocuments")
                        .HasForeignKey("BackSideImageId");

                    b.HasOne("DataLayer.Entities.Files.UserDocumentImage", "FrontSideImage")
                        .WithMany("FrontUserDocuments")
                        .HasForeignKey("FrontSideImageId");

                    b.Navigation("BackSideImage");

                    b.Navigation("FrontSideImage");
                });

            modelBuilder.Entity("DataLayer.Entities.Files.AccidentImage", b =>
                {
                    b.HasOne("DataLayer.Entities.Orders.Accident", "Accident")
                        .WithMany("PhotoDocumantation")
                        .HasForeignKey("AccidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accident");
                });

            modelBuilder.Entity("DataLayer.Entities.Files.OrderImage", b =>
                {
                    b.HasOne("DataLayer.Entities.Orders.Order", "Order")
                        .WithMany("ReturningPhotos")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DataLayer.Entities.Cars.Car", b =>
                {
                    b.Navigation("Accidents");

                    b.Navigation("Orders");

                    b.Navigation("PurchaseContract");
                });

            modelBuilder.Entity("DataLayer.Entities.Cars.CarDocument", b =>
                {
                    b.Navigation("STKUsers");

                    b.Navigation("TechnicLicenseUsers");
                });

            modelBuilder.Entity("DataLayer.Entities.Cars.CarInsurance", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DataLayer.Entities.Orders.Accident", b =>
                {
                    b.Navigation("Documantation");

                    b.Navigation("PhotoDocumantation");
                });

            modelBuilder.Entity("DataLayer.Entities.Orders.Order", b =>
                {
                    b.Navigation("Accidents");

                    b.Navigation("Payments");

                    b.Navigation("ReturningPhotos");
                });

            modelBuilder.Entity("DataLayer.Entities.User.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("StripeSubscriptions");
                });

            modelBuilder.Entity("DataLayer.Entities.User.UserDocument", b =>
                {
                    b.Navigation("DriverLicenseUsers");

                    b.Navigation("IdentificationLicenseUsers");
                });

            modelBuilder.Entity("DataLayer.Entities.Files.CarDocumentImage", b =>
                {
                    b.Navigation("BackCarDocuments");

                    b.Navigation("FrontCarDocuments");
                });

            modelBuilder.Entity("DataLayer.Entities.Files.UserDocumentImage", b =>
                {
                    b.Navigation("BackUserDocuments");

                    b.Navigation("FrontUserDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
