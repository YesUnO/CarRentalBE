// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230323224605_applicationEntities")]
    partial class applicationEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Entities.Cars.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasicRentalPrice")
                        .HasColumnType("numeric");

                    b.Property<int?>("CarInsuranceId")
                        .HasColumnType("integer");

                    b.Property<int>("CarServiceState")
                        .HasColumnType("integer");

                    b.Property<int?>("CarSpecificationId")
                        .HasColumnType("integer");

                    b.Property<int>("CarState")
                        .HasColumnType("integer");

                    b.Property<decimal>("CurrentMileage")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("MileageAtPurchase")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProfilePicId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("STKId")
                        .HasColumnType("integer");

                    b.Property<int?>("TechnicLicenseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarInsuranceId");

                    b.HasIndex("CarSpecificationId");

                    b.HasIndex("ProfilePicId");

                    b.HasIndex("STKId");

                    b.HasIndex("TechnicLicenseId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("DataLayer.Entities.Cars.CarDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BackSideId")
                        .HasColumnType("integer");

                    b.Property<int>("CarDocumentType")
                        .HasColumnType("integer");

                    b.Property<string>("DocNr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FrontSideId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ValidTill")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BackSideId");

                    b.HasIndex("FrontSideId");

                    b.ToTable("CarDocuments");
                });

            modelBuilder.Entity("DataLayer.Entities.Cars.CarInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("CarInsurances");
                });

            modelBuilder.Entity("DataLayer.Entities.Cars.CarReturningPhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BackSideId")
                        .HasColumnType("integer");

                    b.Property<int>("CabineId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DashboardId")
                        .HasColumnType("integer");

                    b.Property<int>("FrontSideId")
                        .HasColumnType("integer");

                    b.Property<int>("OtherSideId")
                        .HasColumnType("integer");

                    b.Property<int>("SideId")
                        .HasColumnType("integer");

                    b.Property<int>("TrunkId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BackSideId");

                    b.HasIndex("CabineId");

                    b.HasIndex("DashboardId");

                    b.HasIndex("FrontSideId");

                    b.HasIndex("OtherSideId");

                    b.HasIndex("SideId");

                    b.HasIndex("TrunkId");

                    b.ToTable("CarReturningPhotos");
                });

            modelBuilder.Entity("DataLayer.Entities.Cars.CarSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Height")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LoadCapacity")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ManufacturedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ManufacturedIn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("integer");

                    b.Property<decimal>("TrunkHeight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TrunkLength")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TrunkVolume")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TrunkWidth")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("CarSpecifications");
                });

            modelBuilder.Entity("DataLayer.Entities.Files.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccidentId")
                        .HasColumnType("integer");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccidentId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DataLayer.Entities.Files.PDF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccidentId")
                        .HasColumnType("integer");

                    b.Property<int?>("CarId")
                        .HasColumnType("integer");

                    b.Property<int?>("CarInsuranceId")
                        .HasColumnType("integer");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccidentId");

                    b.HasIndex("CarId");

                    b.HasIndex("CarInsuranceId");

                    b.ToTable("PDFs");
                });

            modelBuilder.Entity("DataLayer.Entities.Orders.Accident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Accidents");
                });

            modelBuilder.Entity("DataLayer.Entities.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccidentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Distance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReturningPhotosId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccidentId");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ReturningPhotosId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DataLayer.Entities.Orders.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CanceledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentCardId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PaymentCardId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DataLayer.Entities.User.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<int?>("DriversLicenseId")
                        .HasColumnType("integer");

                    b.Property<int?>("IdentificationCardId")
                        .HasColumnType("integer");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DriversLicenseId");

                    b.HasIndex("IdentificationCardId");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("DataLayer.Entities.User.PaymentCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("PaymentCards");
                });

            modelBuilder.Entity("DataLayer.Entities.User.UserDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BackSideId")
                        .HasColumnType("integer");

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<string>("DocNr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FrontSideId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("UserDocumentType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ValidTill")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BackSideId");

                    b.HasIndex("FrontSideId");

                    b.ToTable("UserDocuments");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("boolean");

                    b.Property<string>("Use")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b49e5e21-bcdb-4fac-b8ea-bfa2d81168f7",
                            ConcurrencyStamp = "ff7ed6fb-b2fc-4779-b79b-9ea30a65fd35",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0b5141f7-3aed-4cf9-a51d-4ad671703e1f",
                            ConcurrencyStamp = "6699bea8-7097-4f11-862c-5417a61b2d19",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1b7fe7c6-fc40-4f0e-934e-7c83f9d75406",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c61cdd2-4970-41c6-8712-7d46ce4b9a46",
                            Email = "vilem.cech@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VILEM.CECH@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJD/COk6WNrhyvTXEi04PcD2UWr25Za1djYS4VH83LlhnytQKBZ0bEgHX4HAKC1O2A==",
                            PhoneNumber = "773951604",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1fb20ce7-415c-4d71-950e-0f14333622ed",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1b7fe7c6-fc40-4f0e-934e-7c83f9d75406",
                            RoleId = "b49e5e21-bcdb-4fac-b8ea-bfa2d81168f7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataLayer.Entities.Cars.Car", b =>
                {
                    b.HasOne("DataLayer.Entities.Cars.CarInsurance", "CarInsurance")
                        .WithMany()
                        .HasForeignKey("CarInsuranceId");

                    b.HasOne("DataLayer.Entities.Cars.CarSpecification", "CarSpecification")
                        .WithMany()
                        .HasForeignKey("CarSpecificationId");

                    b.HasOne("DataLayer.Entities.Files.Image", "ProfilePic")
                        .WithMany()
                        .HasForeignKey("ProfilePicId");

                    b.HasOne("DataLayer.Entities.Cars.CarDocument", "STK")
                        .WithMany()
                        .HasForeignKey("STKId");

                    b.HasOne("DataLayer.Entities.Cars.CarDocument", "TechnicLicense")
                        .WithMany()
                        .HasForeignKey("TechnicLicenseId");

                    b.Navigation("CarInsurance");

                    b.Navigation("CarSpecification");

                    b.Navigation("ProfilePic");

                    b.Navigation("STK");

                    b.Navigation("TechnicLicense");
                });

            modelBuilder.Entity("DataLayer.Entities.Cars.CarDocument", b =>
                {
                    b.HasOne("DataLayer.Entities.Files.Image", "BackSide")
                        .WithMany()
                        .HasForeignKey("BackSideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Files.Image", "FrontSide")
                        .WithMany()
                        .HasForeignKey("FrontSideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BackSide");

                    b.Navigation("FrontSide");
                });

            modelBuilder.Entity("DataLayer.Entities.Cars.CarReturningPhotos", b =>
                {
                    b.HasOne("DataLayer.Entities.Files.Image", "BackSide")
                        .WithMany()
                        .HasForeignKey("BackSideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Files.Image", "Cabine")
                        .WithMany()
                        .HasForeignKey("CabineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Files.Image", "Dashboard")
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Files.Image", "FrontSide")
                        .WithMany()
                        .HasForeignKey("FrontSideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Files.Image", "OtherSide")
                        .WithMany()
                        .HasForeignKey("OtherSideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Files.Image", "Side")
                        .WithMany()
                        .HasForeignKey("SideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Files.Image", "Trunk")
                        .WithMany()
                        .HasForeignKey("TrunkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BackSide");

                    b.Navigation("Cabine");

                    b.Navigation("Dashboard");

                    b.Navigation("FrontSide");

                    b.Navigation("OtherSide");

                    b.Navigation("Side");

                    b.Navigation("Trunk");
                });

            modelBuilder.Entity("DataLayer.Entities.Files.Image", b =>
                {
                    b.HasOne("DataLayer.Entities.Orders.Accident", null)
                        .WithMany("PhotoDocumantation")
                        .HasForeignKey("AccidentId");
                });

            modelBuilder.Entity("DataLayer.Entities.Files.PDF", b =>
                {
                    b.HasOne("DataLayer.Entities.Orders.Accident", null)
                        .WithMany("Documantation")
                        .HasForeignKey("AccidentId");

                    b.HasOne("DataLayer.Entities.Cars.Car", null)
                        .WithMany("PurchaseContract")
                        .HasForeignKey("CarId");

                    b.HasOne("DataLayer.Entities.Cars.CarInsurance", null)
                        .WithMany("Documents")
                        .HasForeignKey("CarInsuranceId");
                });

            modelBuilder.Entity("DataLayer.Entities.Orders.Order", b =>
                {
                    b.HasOne("DataLayer.Entities.Orders.Accident", "Accident")
                        .WithMany()
                        .HasForeignKey("AccidentId");

                    b.HasOne("DataLayer.Entities.Cars.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.User.ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Orders.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("DataLayer.Entities.Cars.CarReturningPhotos", "ReturningPhotos")
                        .WithMany()
                        .HasForeignKey("ReturningPhotosId");

                    b.Navigation("Accident");

                    b.Navigation("Car");

                    b.Navigation("Customer");

                    b.Navigation("Payment");

                    b.Navigation("ReturningPhotos");
                });

            modelBuilder.Entity("DataLayer.Entities.Orders.Payment", b =>
                {
                    b.HasOne("DataLayer.Entities.User.PaymentCard", "PaymentCard")
                        .WithMany()
                        .HasForeignKey("PaymentCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentCard");
                });

            modelBuilder.Entity("DataLayer.Entities.User.ApplicationUser", b =>
                {
                    b.HasOne("DataLayer.Entities.User.UserDocument", "DriversLicense")
                        .WithMany()
                        .HasForeignKey("DriversLicenseId");

                    b.HasOne("DataLayer.Entities.User.UserDocument", "IdentificationCard")
                        .WithMany()
                        .HasForeignKey("IdentificationCardId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.Navigation("DriversLicense");

                    b.Navigation("IdentificationCard");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("DataLayer.Entities.User.UserDocument", b =>
                {
                    b.HasOne("DataLayer.Entities.Files.Image", "BackSide")
                        .WithMany()
                        .HasForeignKey("BackSideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Files.Image", "FrontSide")
                        .WithMany()
                        .HasForeignKey("FrontSideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BackSide");

                    b.Navigation("FrontSide");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Entities.Cars.Car", b =>
                {
                    b.Navigation("PurchaseContract");
                });

            modelBuilder.Entity("DataLayer.Entities.Cars.CarInsurance", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DataLayer.Entities.Orders.Accident", b =>
                {
                    b.Navigation("Documantation");

                    b.Navigation("PhotoDocumantation");
                });
#pragma warning restore 612, 618
        }
    }
}
